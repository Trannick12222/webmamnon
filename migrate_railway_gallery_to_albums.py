#!/usr/bin/env python3
"""
Script ƒë·ªÉ migrate gallery hi·ªán t·∫°i tr√™n Railway th√†nh album system
- K·∫øt n·ªëi t·ªõi Railway MySQL database
- T√¨m c√°c ·∫£nh c√≥ c√πng description
- T·∫°o album v√† gom c√°c ·∫£nh c√≥ c√πng m√¥ t·∫£
"""

import mysql.connector
from mysql.connector import Error
import sys
from datetime import datetime
from collections import defaultdict

# Railway MySQL Configuration
RAILWAY_DB_CONFIG = {
    'host': 'crossover.proxy.rlwy.net',
    'port': 29685,
    'user': 'root',
    'password': 'JUMlghRDGtVSaVSZoLgpelgXeTfNpAbp',
    'database': 'railway'
}

def create_railway_connection():
    """T·∫°o k·∫øt n·ªëi ƒë·∫øn Railway MySQL database"""
    try:
        connection = mysql.connector.connect(**RAILWAY_DB_CONFIG)
        if connection.is_connected():
            print("‚úÖ K·∫øt n·ªëi Railway database th√†nh c√¥ng!")
            return connection
    except Error as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi Railway database: {e}")
        return None

def check_album_tables_exist(connection):
    """Ki·ªÉm tra xem c√°c b·∫£ng album ƒë√£ t·ªìn t·∫°i ch∆∞a"""
    cursor = connection.cursor()
    
    try:
        # Ki·ªÉm tra b·∫£ng gallery_album
        cursor.execute("SHOW TABLES LIKE 'gallery_album'")
        album_table_exists = cursor.fetchone() is not None
        
        # Ki·ªÉm tra c·ªôt album_id trong b·∫£ng gallery
        cursor.execute("DESCRIBE gallery")
        columns = [row[0] for row in cursor.fetchall()]
        album_id_column_exists = 'album_id' in columns
        
        return album_table_exists and album_id_column_exists
        
    except Error as e:
        print(f"‚ùå L·ªói ki·ªÉm tra b·∫£ng: {e}")
        return False
    finally:
        cursor.close()

def create_album_tables(connection):
    """T·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt cho album system"""
    cursor = connection.cursor()
    
    try:
        print("üìù T·∫°o b·∫£ng gallery_album...")
        
        create_album_table_query = """
        CREATE TABLE IF NOT EXISTS gallery_album (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(200) NOT NULL,
            description TEXT,
            category VARCHAR(100),
            is_featured TINYINT(1) DEFAULT 0,
            cover_image_id INT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_created_at (created_at),
            INDEX idx_category (category),
            INDEX idx_is_featured (is_featured)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """
        cursor.execute(create_album_table_query)
        
        print("üìù Th√™m c·ªôt album_id v√†o b·∫£ng gallery...")
        try:
            add_album_id_query = """
            ALTER TABLE gallery 
            ADD COLUMN album_id INT NULL,
            ADD INDEX idx_album_id (album_id);
            """
            cursor.execute(add_album_id_query)
        except Error as e:
            if "Duplicate column name 'album_id'" in str(e):
                print("‚ö†Ô∏è  C·ªôt album_id ƒë√£ t·ªìn t·∫°i, b·ªè qua...")
            else:
                raise e
        
        print("üìù Th√™m foreign key constraints...")
        try:
            fk_gallery_album_query = """
            ALTER TABLE gallery 
            ADD CONSTRAINT fk_gallery_album 
            FOREIGN KEY (album_id) REFERENCES gallery_album(id) 
            ON DELETE SET NULL ON UPDATE CASCADE;
            """
            cursor.execute(fk_gallery_album_query)
        except Error as e:
            if "foreign key constraint already exists" in str(e) or "Duplicate foreign key" in str(e):
                print("‚ö†Ô∏è  Foreign key fk_gallery_album ƒë√£ t·ªìn t·∫°i, b·ªè qua...")
            else:
                print(f"‚ö†Ô∏è  L·ªói t·∫°o foreign key gallery->album: {e}")
        
        try:
            fk_album_cover_query = """
            ALTER TABLE gallery_album 
            ADD CONSTRAINT fk_album_cover_image 
            FOREIGN KEY (cover_image_id) REFERENCES gallery(id) 
            ON DELETE SET NULL ON UPDATE CASCADE;
            """
            cursor.execute(fk_album_cover_query)
        except Error as e:
            if "foreign key constraint already exists" in str(e) or "Duplicate foreign key" in str(e):
                print("‚ö†Ô∏è  Foreign key fk_album_cover_image ƒë√£ t·ªìn t·∫°i, b·ªè qua...")
            else:
                print(f"‚ö†Ô∏è  L·ªói t·∫°o foreign key album->cover: {e}")
        
        connection.commit()
        print("‚úÖ T·∫°o b·∫£ng album th√†nh c√¥ng!")
        return True
        
    except Error as e:
        print(f"‚ùå L·ªói t·∫°o b·∫£ng album: {e}")
        connection.rollback()
        return False
    finally:
        cursor.close()

def get_gallery_data(connection):
    """L·∫•y d·ªØ li·ªáu gallery hi·ªán t·∫°i"""
    cursor = connection.cursor(dictionary=True)
    
    try:
        query = """
        SELECT id, title, image_path, description, category, is_featured, created_at
        FROM gallery 
        WHERE album_id IS NULL OR album_id = 0
        ORDER BY created_at DESC
        """
        cursor.execute(query)
        images = cursor.fetchall()
        
        print(f"üìä T√¨m th·∫•y {len(images)} ·∫£nh ch∆∞a ƒë∆∞·ª£c gom v√†o album")
        return images
        
    except Error as e:
        print(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu gallery: {e}")
        return []
    finally:
        cursor.close()

def group_images_by_description(images):
    """Gom c√°c ·∫£nh theo description"""
    grouped = defaultdict(list)
    
    for image in images:
        desc = image['description']
        if desc and desc.strip():  # Ch·ªâ gom nh·ªØng ·∫£nh c√≥ description
            desc_key = desc.strip().lower()
            grouped[desc_key].append(image)
    
    # Ch·ªâ gi·ªØ l·∫°i nh·ªØng nh√≥m c√≥ t·ª´ 2 ·∫£nh tr·ªü l√™n
    result = {}
    for desc, imgs in grouped.items():
        if len(imgs) >= 2:
            result[desc] = imgs
    
    return result

def create_albums_from_groups(connection, grouped_images):
    """T·∫°o album t·ª´ c√°c nh√≥m ·∫£nh"""
    cursor = connection.cursor()
    created_albums = 0
    processed_images = 0
    
    try:
        for description, images in grouped_images.items():
            print(f"\nüìÅ T·∫°o album cho m√¥ t·∫£: '{description}' ({len(images)} ·∫£nh)")
            
            # T·∫°o title cho album t·ª´ description (l·∫•y 50 k√Ω t·ª± ƒë·∫ßu)
            album_title = description[:50] + "..." if len(description) > 50 else description
            
            # L·∫•y category t·ª´ ·∫£nh ƒë·∫ßu ti√™n
            category = images[0]['category']
            
            # T·∫°o album
            create_album_query = """
            INSERT INTO gallery_album (title, description, category, is_featured, created_at)
            VALUES (%s, %s, %s, %s, %s)
            """
            cursor.execute(create_album_query, (
                album_title,
                description,
                category,
                False,  # is_featured = False
                datetime.now()
            ))
            
            album_id = cursor.lastrowid
            print(f"   ‚úÖ T·∫°o album ID {album_id}: {album_title}")
            
            # C·∫≠p nh·∫≠t c√°c ·∫£nh ƒë·ªÉ thu·ªôc v·ªÅ album n√†y
            image_ids = [img['id'] for img in images]
            update_images_query = """
            UPDATE gallery 
            SET album_id = %s 
            WHERE id IN ({})
            """.format(','.join(['%s'] * len(image_ids)))
            
            cursor.execute(update_images_query, [album_id] + image_ids)
            
            # ƒê·∫∑t ·∫£nh ƒë·∫ßu ti√™n l√†m cover
            cover_image_id = images[0]['id']
            update_cover_query = """
            UPDATE gallery_album 
            SET cover_image_id = %s 
            WHERE id = %s
            """
            cursor.execute(update_cover_query, (cover_image_id, album_id))
            
            print(f"   üì∏ ƒê·∫∑t ·∫£nh ID {cover_image_id} l√†m cover")
            print(f"   üìã Gom {len(images)} ·∫£nh v√†o album")
            
            created_albums += 1
            processed_images += len(images)
        
        connection.commit()
        return created_albums, processed_images
        
    except Error as e:
        print(f"‚ùå L·ªói t·∫°o album: {e}")
        connection.rollback()
        return 0, 0
    finally:
        cursor.close()

def show_statistics(connection):
    """Hi·ªÉn th·ªã th·ªëng k√™ sau khi migrate"""
    cursor = connection.cursor()
    
    try:
        # ƒê·∫øm album
        cursor.execute("SELECT COUNT(*) FROM gallery_album")
        album_count = cursor.fetchone()[0]
        
        # ƒê·∫øm ·∫£nh trong album
        cursor.execute("SELECT COUNT(*) FROM gallery WHERE album_id IS NOT NULL")
        images_in_albums = cursor.fetchone()[0]
        
        # ƒê·∫øm ·∫£nh ƒë∆°n l·∫ª
        cursor.execute("SELECT COUNT(*) FROM gallery WHERE album_id IS NULL")
        standalone_images = cursor.fetchone()[0]
        
        print(f"\nüìä Th·ªëng k√™ sau khi migrate:")
        print(f"   - T·ªïng s·ªë album: {album_count}")
        print(f"   - ·∫¢nh trong album: {images_in_albums}")
        print(f"   - ·∫¢nh ƒë∆°n l·∫ª: {standalone_images}")
        
    except Error as e:
        print(f"‚ùå L·ªói l·∫•y th·ªëng k√™: {e}")
    finally:
        cursor.close()

def main():
    """H√†m ch√≠nh"""
    print("üöÄ Railway Gallery to Albums Migration")
    print("=" * 50)
    
    # K·∫øt n·ªëi Railway database
    connection = create_railway_connection()
    if not connection:
        sys.exit(1)
    
    try:
        # Ki·ªÉm tra v√† t·∫°o b·∫£ng album n·∫øu c·∫ßn
        if not check_album_tables_exist(connection):
            print("üìã C√°c b·∫£ng album ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi...")
            if not create_album_tables(connection):
                print("‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£ng album!")
                sys.exit(1)
        else:
            print("‚úÖ C√°c b·∫£ng album ƒë√£ t·ªìn t·∫°i")
        
        # L·∫•y d·ªØ li·ªáu gallery
        images = get_gallery_data(connection)
        if not images:
            print("‚ö†Ô∏è  Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ x·ª≠ l√Ω")
            return
        
        # Gom ·∫£nh theo description
        grouped_images = group_images_by_description(images)
        
        if not grouped_images:
            print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o c√≥ c√πng m√¥ t·∫£")
            return
        
        print(f"\nüîç T√¨m th·∫•y {len(grouped_images)} nh√≥m ·∫£nh c√≥ c√πng m√¥ t·∫£:")
        for desc, imgs in grouped_images.items():
            print(f"   - '{desc}': {len(imgs)} ·∫£nh")
        
        # X√°c nh·∫≠n t·ª´ user
        confirm = input(f"\n‚ùì B·∫°n c√≥ mu·ªën t·∫°o {len(grouped_images)} album t·ª´ c√°c nh√≥m n√†y? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå H·ªßy b·ªè migration")
            return
        
        # T·∫°o album
        created_albums, processed_images = create_albums_from_groups(connection, grouped_images)
        
        print(f"\nüéâ Migration ho√†n th√†nh!")
        print(f"   ‚úÖ ƒê√£ t·∫°o {created_albums} album")
        print(f"   üì∏ ƒê√£ x·ª≠ l√Ω {processed_images} ·∫£nh")
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        show_statistics(connection)
        
    except Exception as e:
        print(f"\nüí• L·ªói nghi√™m tr·ªçng: {e}")
        sys.exit(1)
    finally:
        if connection and connection.is_connected():
            connection.close()
            print("\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi Railway database")

if __name__ == "__main__":
    main()
